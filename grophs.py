# -*- coding: utf-8 -*-
"""grophs

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M-6ZPwYArjlSwjNvkO7bJadFdBsHyJ58
"""

import matplotlib.pyplot as plt
categories = ['Category A', 'Category B', 'Category C', 'Category D', 'Category E', 'Category F', 'CategoryG ']
amounts = [25, 50, 30, 60, 80, 90,100]
plt.bar(categories, amounts)
plt.xlabel('Categories')
plt.ylabel('Amounts')
plt.title('Bar Chart of Amounts by Category')
plt.show()

import matplotlib.pyplot as plt
categories = ['Category A', 'Category B', 'Category C', 'Category d']
amounts = [25, 50, 30, 50]
plt.pie(amounts, labels=categories, autopct='%1.1f%%')
plt.title('Pie Chart of Amounts by Category')
plt.show()

import matplotlib.pyplot as plt
years = [2010, 2011, 2012, 2013, 2014]
amounts = [100, 120, 140, 110, 150, ]
plt.plot(years, amounts, marker='>', linestyle='--')
plt.xlabel('Year')
plt.ylabel('Amount')
plt.title('Line Chart of Amounts Over Time')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
x = [10, 20, 30, 40, 50]
y = [50, 40, 30, 20, 10]
plt.scatter(x, y)
plt.xlabel('X-Axis')
plt.ylabel('Y-Axis')
plt.title('Scatter Plot of X vs. Y')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
data = np.random.randn(1000)
plt.hist(data, bins=20, edgecolor='k')
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of Data')
plt.show()

import matplotlib.pyplot as plt
import numpy as np
mu, sigma = 3, 5
data = np.random.normal(mu, sigma, 1000)
plt.hist(data, bins=30, color='g', edgecolor='r', alpha=0.7)
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of a Normal Distribution')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np

low,high = 0, 10
data = np.random.uniform(low, high, 1000)
plt.hist(data, bins=20, edgecolor='k', alpha=0.7)
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of a Uniform Distribution')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
scale = 1.0
data = np.random.exponential(scale, 1000)
plt.hist(data, bins=20, color='c', edgecolor='b', alpha=0.7)
plt.xlabel('Value')
plt.ylabel('Frequency')
plt.title('Histogram of an Exponential Distribution')
plt.grid(True)
plt.show()

import seaborn as sns
import numpy as np
mu,sigma = 0, 1
data = np.random.normal(mu, sigma, 1000)
sns.kdeplot(data, shade=True)
plt.xlabel('Value')
plt.ylabel('Density')
plt.title('Kernel Density Estimation (KDE) Plot of a Normal Distribution')
plt.show()

import seaborn as sns
data1 = np.random.normal(0, 1, 1000)
data2 = np.random.normal(2, 1, 1000)
sns.boxplot(data=[data1, data2])
plt.xlabel('Distribution')
plt.ylabel('Value')
plt.title('Box Plot Comparison of Two Distributions')
plt.show()

import matplotlib.pyplot as plt
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
plt.pie(proportions, labels=categories, autopct='%1.1f%%')
plt.title('Pie Chart of Proportions')
plt.show()

import matplotlib.pyplot as plt
categories = ['Category A', 'Category B', 'Category C']
proportions1 = [0.2, 0.4, 0.1]
proportions2 = [0.3, 0.2, 0.4]
plt.bar(categories, proportions1, label='Group 1')
plt.bar(categories, proportions2, bottom=proportions1, label='Group 2')
plt.xlabel('Categories')
plt.ylabel('Proportions')
plt.title('Stacked Bar Chart of Proportions')
plt.legend()
plt.show()

import matplotlib.pyplot as plt
categories = ['Category A', 'Category B', 'Category C']
proportions = [0.4, 0.3, 0.3]
plt.barh(categories, proportions)
plt.xlabel('Proportions')
plt.ylabel('Categories')
plt.title('Horizontal Bar Chart of Proportions')
plt.show()

import matplotlib.pyplot as plt
import numpy as np
years = [2010, 2011, 2012, 2013, 2014]
proportions1 = np.array([0.1, 0.2, 0.3, 0.4, 0.5])
proportions2 = np.array([0.2, 0.3, 0.4, 0.5, 0.6])
plt.stackplot(years, proportions1, proportions2, labels=['Group 1', 'Group 2'], alpha=0.5)
plt.xlabel('Year')
plt.ylabel('Proportions')
plt.title('Stacked Area Chart of Proportions Over Time')
plt.legend(loc='upper left')
plt.show()

import matplotlib.pyplot as plt
import numpy as np
x = np.random.rand(100)
y = 2 * x + np.random.rand(100)
plt.scatter(x, y)
plt.xlabel('X')
plt.ylabel('Y')
plt.title('Scatter Plot for Bivariate Association')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import numpy as np
time = np.arange(0, 10, 0.1)
data = np.sin(time)
plt.plot(time, data)
plt.xlabel('Time')
plt.ylabel('Value')
plt.title('Line Plot for Time Series Data')
plt.grid(True)
plt.show()

import seaborn as sns
import numpy as np
corr_matrix = np.corrcoef(np.random.rand(5, 5))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', square=True)
plt.title('Heatmap of Correlation Matrix')
plt.show()

import seaborn as sns
data = sns.load_dataset("iris")
sns.pairplot(data, hue="species")
plt.suptitle('Pair Plot of Iris Dataset', y=1.02)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
data = sns.load_dataset("tips")
sns.boxplot(x="day", y="total_bill", data=data)
plt.xlabel('Day of the Week')
plt.ylabel('Total Bill Amount')
plt.title('Box Plot of Total Bill Amount by Day')
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
time_series_data = np.random.randn(len(date_rng))
time_series_df = pd.DataFrame(time_series_data, index=date_rng, columns=['Value'])
plt.figure(figsize=(12, 6))
plt.plot(time_series_df.index, time_series_df['Value'])
plt.xlabel('Date')
plt.ylabel('Value')
plt.title('Line Plot of Time Series Data')
plt.grid(True)
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
date_rng = pd.date_range(start='2022-01-01', end='2022-12-31', freq='D')
time_series_data = np.random.randn(len(date_rng)).cumsum()

# Create a time series DataFrame time_series_df = pd.DataFrame(time_series_data, index=date_rng, columns=['Cumulative Value'])

# Create an area plot plt.figure(figsize=(12, 6)) plt.fill_between(time_series_df.index, time_series_df['Cumulative Value'], color='skyblue')

# Adding labels and a title plt.xlabel('Date') plt.ylabel('Cumulative Value') plt.title('Area Plot of Cumulative Time Series Data')

# Show the plot plt.grid(True) plt.show()